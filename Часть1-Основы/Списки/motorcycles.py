# 1. Изменение элементов в списке
# Допустим, имеется список мотоциклов, и первый его элемент — строка 'honda'. 
# Мы можем изменить значение этого элемента после того, как список будет создан:
motorcycles = ['honda', 'yamaha', 'suzuki']
print("\n\t Изменение элементов в списке\n \n1.1 ", motorcycles)
motorcycles[0] = 'ducati'
print("1.2 ", motorcycles)

# 2. Добавление элементов в список
# 2.1 Присоединение элементов в конец списка
motorcycles.append('ducati') # Метод append() добавляет строку 'ducati' в конец списка, при этом другие элементы в нем остаются неизменными:
print("""\n\t Добавление элементов в список
      Метод append() добавляет строку 'ducati' в конец списка\n \n2.1 """, motorcycles)

# 2.2 Метод append() упрощает динамическое создание списков. Например, вы можете начать с пустого списка и 
# добавлять в него элементы, используя серию команд append(). В следующем примере в пустой список добавляются элементы 'honda', 'yamaha' и 'suzuki':
motorcycles = []
print(f"\n\t Заполняем пустой список \n \n2.2 motorcycles = {motorcycles}")
motorcycles.append('honda')
motorcycles.append('yamaha')
motorcycles.append('suzuki')
print(f"2.2 motorcycles = {motorcycles}")

# 2.3 Вставка элементов в список
# Метод insert() позволяет добавить новый элемент в произвольную позицию спис­ка. 
# Для этого следует указать индекс и значение нового элемента.

motorcycles.insert(0, 'ducati') # В этом примере значение 'ducati' вставляется в начало списка. Метод insert() 
                                # выделяет свободное место в позиции 0 и сохраняет в нем значение 'ducati'
                                #Эта операция сдвигает все остальные значения в списке на одну позицию вправо.
print(f"""\n Вставка элементов в список
      В этом примере значение 'ducati' вставляется в начало списка.
      2.3 motorcycles = {motorcycles}""") 

# 3. Удаление элементов из списка
# Удаление элемента с помощью оператора del
# Если вам известна позиция элемента, который должен быть удален из списка, 
# воспользуйтесь оператором del:
print("3. ", motorcycles)
del motorcycles[0]
print("3. - del ", motorcycles) # Оператор del удаляет первый элемент, 'ducati', из списка motorcycles

# 3.1 С помощью оператора del вы можете удалить элемент из любой позиции списка, 
# если вам известен его индекс. Например, вот как из списка удаляется второй элемент 'yamaha':
motorcycles = ['honda', 'yamaha', 'suzuki']
print("3.1 ", motorcycles)
del motorcycles[1]
print("3.1 - del ", motorcycles)

# 3.2 Удаление элемента с помощью метода pop()
# Иногда значение, удаляемое из списка, должно как-то использоваться. Допустим, вы 
# хотите получить координаты x и y только что сбитого корабля пришельцев, чтобы 
# изобразить взрыв в этой позиции. В веб-приложении пользователя, удаленного из 
# списка активных участников, можно добавить в список неактивных и т. д. 
# Метод pop() удаляет последний элемент из списка, но позволяет работать с ним 
# после удаления. Термин pop («выталкивание») возник из-за того, что список 
# представляет собой стопку элементов и один элемент выталкивается из вершины стопки. 
# В этой аналогии вершина стека соответствует концу списка. 
# Удалим мотоцикл из списка:
motorcycles = ['honda', 'yamaha', 'suzuki']
print("3.2 ", motorcycles)
popped_motorcycle = motorcycles.pop()
print("3.2 - motorcycles", motorcycles)
print("3.2 - popped_motorcycle =", popped_motorcycle, """\n\t - Из вывода видно, что значение 'suzuki', 
      удаленное в конце списка, теперь хранится в переменной popped_motorcycle.""")

# Сначала определяется и выводится содержимое списка motorcycles. 
# Затем значение извлекается из списка и сохраняется в переменной popped_motorcycle.
# Вывод измененного списка показывает, что значение было удалено из списка.
# Затем мы выводим извлеченное значение, демонстрируя, что удаленное из списка
# значение остается доступным в программе.

# 3.3 Для чего может понадобиться метод pop()? Представьте, что информация о 
# мотоциклах хранится в списке в хронологическом порядке, соответствующем дате их покупки. 
# В таком случае команда pop() может использоваться для вывода сообщения о 
# последнем купленном мотоцикле:
motorcycles = ['honda', 'yamaha', 'suzuki']
print("\n3.3 - motorcycles", motorcycles)
last_owned = motorcycles.pop()
print("3.3 - motorcycles", motorcycles)
print(f"3.3 The last motorcycle I owned was a {last_owned.title()}.")

# 4. Удаление элементов из произвольной позиции списка
# Вызов pop() может использоваться для удаления элемента в произвольной позиции 
# списка; для этого следует указать индекс удаляемого элемента в круглых скобках:
motorcycles = ['honda', 'yamaha', 'suzuki']
first_owned = motorcycles.pop(0)
print(f"\n4. The first motorcycle I owned was a {first_owned.title()}.\n")

#Сначала первый элемент извлекается из списка, а затем выводится сообщение об 
# этом мотоцикле. Программа выдает простое сообщение о мотоцикле, который был куплен первым.

# Помните, что после каждого вызова pop() элемент, с которым вы работаете, уже не находится в списке.
# Если вы не уверены в том, что выбрать: оператор del или метод pop(), — вам поможет простое правило: 
# если вы собираетесь просто удалить элемент из списка, никак не используя его после удаления, 
# то выбирайте оператор del; в противном случае выбирайте метод pop().

