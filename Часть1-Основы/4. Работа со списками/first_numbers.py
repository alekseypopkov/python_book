# Создание числовых списков

#Списки идеально подходят для хранения наборов чисел, а Python предоставляет 
# специальные средства, позволяющие эффективно работать с числовыми списками. 
# Достаточно один раз понять, как пользоваться этими средствами, — и ваш код будет 
# хорошо работать даже в том случае, если список содержит миллионы элементов.

# Функция range()
#Функция range() упрощает создание числовых последовательностей. Например, с ее помощью можно легко вывести серию чисел:

for value in range(1,5):
    print(value)
print()

# И хотя на первый взгляд может показаться, что код должен вывести числа от 1 до 5,
# на самом деле число 5 не выводится.

# В этом примере функция range() выводит только числа от 1 до 4. Перед вами еще 
# один вариант явления «смещения на 1», часто встречающегося в языках программирования. 
# При выполнении range() Python начинает отсчет от первого переданного значения 
# и прекращает его при достижении второго. Так как на втором значении происходит остановка, 
# конец интервала (в данном случае 5) не встречается в выводе. 
# Чтобы вывести числа от 1 до 5, используйте функцию range(1, 6):

for value in range(1, 6):
    print(value)
print()

# На этот раз вывод начинается с единицы и завершается цифрой 5.

# Кроме того, функции range() можно передать только один аргумент; в этом случае
#последовательность чисел будет начинаться с 0. Например, range(6) вернет числа от 0 до 5.

for value in range(6):
    print(value)
print()

# Использование функции range() для создания числового списка

# Если вы хотите создать числовой список, то преобразуйте результаты range() 
# в список с помощью функции list(). Если заключить вызов range() в функцию 
# list(), то результат будет представлять собой список с числовыми элементами.
# В примере из предыдущего подраздела числовая последовательность просто выводилась на экран. 
# Тот же набор чисел можно преобразовать в список с помощью функции list():

numbers = list(range(1, 6))
print(numbers)

# Результат:
# [1, 2, 3, 4, 5]

numbers = list(range(6))
print(numbers)
print()

# Результат:
# [0, 1, 2, 3, 4, 5]

# Кроме того, функция range() может генерировать числовые последовательности, пропуская числа в заданном диапазоне. Если вы передадите в range() третий 
# аргумент, то Python будет использовать это значение в качестве величины шага при генерации чисел. Например, список четных чисел от 1 до 10 создается так:

even_numbers = list(range(2, 11, 2))
print(even_numbers)
print()

# В этом примере функция range() начинает со значения 2, а затем увеличивает его на 2. Приращение 2 последовательно применяется до тех пор, пока не будет
# достигнуто или пройдено конечное значение 11, после чего выводится результат: 
# [2, 4, 6, 8, 10]

#С помощью функции range() можно создать практически любой диапазон чисел. Например, как бы вы создали список квадратов всех целых чисел от 1 до 10? В языке
# Python операция возведения в степень обозначается двумя звездочками (**). Один из возможных вариантов списка квадратов выглядит так:

squares = []
for value in range(1, 11):
    square = value ** 2
    squares.append(square)
print(squares)
print()

# Сначала создается пустой список squares. Затем Python перебирает все значения от 1 до 10 с помощью функции range(). В цикле текущее значение возводится во
# вторую степень, а результат сохраняется в переменной square. Каждое новое значение square присоединяется к списку squares . Наконец, после завершения
# цикла выводится список квадратов:
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# Чтобы сделать код более компактным, можно опустить временную переменную square и присоединять каждое новое значение прямо к списку:

squares = []
for value in range(1, 11):
    squares.append(value**2)
print(squares)
print()

# Эта строка выполняет ту же работу, что и код цикла for, показанный выше. Каждое значение в цикле возводится во вторую степень, а затем немедленно присоединяется
# к списку квадратов. При создании более сложных списков можно применять любой из двух подходов. В одних случаях использование временной переменной упрощает чтение кода;
# в других — чрезмерно удлиняет код. Сначала сосредоточьтесь на написании четкого и понятного кода, который делает именно то, что нужно, и только потом переходите
# к анализу кода и поиску более эффективных решений.

# Простая статистика с числовыми списками

# Некоторые функции Python предназначены для работы с числовыми списками. Например, вы можете легко узнать минимум, максимум и сумму числового списка:
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
print(min(digits))
# 0
print(max(digits))
# 9
print(sum(digits))
print()
# 45

# ПРИМЕЧАНИЕ 
# В примерах этого раздела используются короткие списки чисел, но это делается только для того, чтобы данные помещались на странице. 
# Примеры будут работать и в том случае, если список содержит миллионы чисел.

# Генераторы списков

# Описанный выше пример генерирования списка squares состоял из трех или четырех строк кода. 
# Генератор списка (list comprehension) позволяет создать тот же список всего одной строкой, 
# объединяя цикл for и создание новых элементов в одну строку и автоматически добавляя к списку все новые элементы. 
# В учебниках для начинающих программистов не всегда рассказывается о генераторах списков, но я привожу этот материал, 
# поскольку вы с большой вероятностью встретите данную конструкцию, как только начнете просматривать код других разработчиков. 
# В следующем примере знакомый вам список квадратов создается с помощью генератора списка:

squares = [value**2 for value in range(1, 11)]
print(squares)
print()

# Чтобы использовать этот синтаксис, начните с описательного имени списка — например, squares. 
# Затем откройте квадратные скобки и определите выражение для значений, которые должны быть сохранены в новом списке. 
# В данном примере это выражение value**2, которое возводит значение во вторую степень. 
# Затем напишите цикл for для генерирования чисел, которые должны передаваться выражению, 
# и закройте квадратные скобки. Цикл for в данном примере — for value in range(1, 11) — передает значения с 1 до 10 выражению value**2. 
# Обратите внимание на отсутствие двоеточия в конце оператора for. 
# 
# Результатом будет уже знакомый вам список квадратов:
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 
# Чтобы успешно писать собственные генераторы списков, необходим определенный опыт. 
# Тем не менее, освоив создание обычных списков, вы оцените возможности генераторов. 
# Когда после очередного трех-четырехстрочного блока вам надоест создавать списки, подумайте о написании генераторов.