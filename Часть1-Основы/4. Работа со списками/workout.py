# УПРАЖНЕНИЯ 

# 4.1. Пицца. Вспомните по крайней мере три названия ваших любимых видов пиццы. 
# Сохраните их в списке и используйте цикл for для вывода всех названий.
# • Измените цикл for так, чтобы вместо простого названия пиццы выводилось 
# сообщение, содержащее это название. Таким образом, для каждого элемента 
# должна выводиться строка с простым текстом вида «Я люблю пиццу пеперони».
# • Добавьте в конец программы (после цикла for) строку, в которой будет указано, 
# насколько вы любите пиццу. Таким образом, вывод должен состоять из трех (и более) строк 
# с названиями пиццы и дополнительного предложения — скажем, «Я очень люблю пиццу!»

pizzas = ['Margherita', 'Marinara', 'Quattro Stagioni', 'Carbonara', 'Quattro Formaggi']
for pizza in pizzas:
    print(f"\nЯ люблю пиццу {pizza}")
print("\nЯ очень люблю пиццу!")

# 4.2. Животные. Создайте список из трех (и более) животных, обладающих общей характеристикой. 
# Используйте цикл for для вывода названий каждого животного.
# • Измените программу так, чтобы она выводила сообщение о каждом животном, — например, 
# «Собака — отличное домашнее животное». 
# • Добавьте в конец программы строку с описанием общего свойства. Например, можно 
# вывести сообщение «Любое из этих животных — отличное домашнее животное!»

animals = ['dog', 'cat', 'rabbit']
for animal in animals:
    print(f"\n{animal} — отличное домашнее животное")
print("\nЛюбое из этих животных — отличное домашнее животное!")

# Создание числовых списков

# 4.3. Считаем до 20. Используйте цикл for для вывода чисел от 1 до 20 включительно.

numbers = [print(number) for number in range(1, 21)]
print()

# 4.4. Миллион. Создайте список чисел от 1 до 1 000 000, затем воспользуйтесь
# циклом for для вывода чисел. (Если вывод занимает слишком много времени, то
# остановите его, нажав Ctrl+C или закрыв окно вывода.)

# numbers = [print(number) for number in range(1, 1_000_001)]
# print()

# 4.5. Суммирование миллиона чисел. Создайте список чисел от 1 до 1 000 000, затем воспользуйтесь функциями min() и max() и убедитесь, 
# что список действи тельно начинается с 1 и заканчивается 1 000 000. Вызовите функцию sum() и посмотрите, 
# насколько быстро Python сможет суммировать миллион чисел.
 
numbers = [number for number in range(1, 1_000_001)]
print(f"min = {min(numbers)}; max = {max(numbers)}; сумма = {sum(numbers)}")
print()
  
# 4.6. Нечетные числа. Используйте третий аргумент функции range(), чтобы создать список нечетных чисел от 1 до 20. 
# Выведите все числа в цикле for.

numbers =[print(number) for number in range(1, 20, 2)]
print()

# 4.7. Тройки. Создайте список чисел, кратных 3, в диапазоне от 3 до 30. Выведите все числа списка в цикле for.

numbers =[print(number) for number in range(3, 31, 3)]
print()

# 4.8. Кубы. Результат возведения числа в третью степень называется кубом.
# Например, куб 2 записывается в языке Python как 2**3. Создайте список первых
# 10 кубов (то есть кубов всех целых чисел от 1 до 10) и с помощью цикла for вы-
# ведите значения каждого куба.

for number in range(1, 10):
    print(number**3)
print()

# 4.9. Генератор кубов. Используйте конструкцию генератора списка для создания
# списка первых 10 кубов.

numbers =[print(number**3) for number in range(1, 10)]
print()

# Работа с частью списка

# 4.10. Срезы. Добавьте в конец одной из программ, написанных в этой главе, фрагмент, 
# который делает следующее:
# • выводит сообщение «Первые три пункта в списке — это:», а затем использует
# срез для вывода первых трех элементов из списка;

players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(f"Первые три пункта в списке — это:")
play = [print(player) for player in players[0:3]]

# • выводит сообщение «Три пункта из середины списка:», а затем использует
# срез для вывода первых трех элементов из середины списка;

print(f"\nТри пункта из середины списка:")
play = [print(player) for player in players[1:4]]

# • выводит сообщение «Последние три пункта в списке — это:», а затем использует 
# срез для вывода последних трех элементов из списка.

print(f"\nоследние три пункта в списке — это:")
play = [print(player) for player in players[-3:]]

# 4.11. Моя пицца, твоя пицца. Начните с программы из упражнения 4.1. Соз-
# дайте копию списка с видами пиццы, присвойте ему имя friend_pizzas. 

pizzas = ['Margherita', 'Marinara', 'Quattro Stagioni', 'Carbonara', 'Quattro Formaggi']
friend_pizzas = pizzas[:]
print()
print(friend_pizzas)


# Затем сделайте следующее:
# • добавьте новую пиццу в исходный список;
# • добавьте другую пиццу в список friend_pizzas;
# • докажите, что в программе существуют два разных списка. 
# Выведите сообщение «Мои любимые пиццы:», а затем первый список в цикле for. Выведите
# сообщение «Любимые пиццы моего друга:», а затем второй список в цикле for.
# Убедитесь в том, что каждая новая пицца находится в соответствующем списке.
# 4.12. Больше циклов. Во всех версиях foods.py из этого раздела мы избегали
# использования цикла for при выводе для экономии места. Выберите версию
# foods.py и напишите два цикла for для вывода каждого списка.